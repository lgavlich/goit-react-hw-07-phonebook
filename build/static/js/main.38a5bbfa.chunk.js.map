{"version":3,"sources":["components/Filter/Filter.module.css","components/PhonebookItem/PhonebookItem.module.css","components/Container/Container.module.css","components/Container/Container.js","redux/contacts-actions.js","components/ContactList/ContactList.js","components/PhonebookItem/PhonebookItem.js","redux/contacts-selector.js","components/PhonebookList/PhonebookList.js","components/Filter/Filter.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","s","container","addContact","createAction","data","payload","id","uuidv4","name","number","deleteContact","changeFilter","connect","state","contacts","items","dispatch","onFormSubmit","actions","useState","setName","setNumber","contactID","useRef","inputValue","event","target","value","formReset","form","onSubmit","preventDefault","contactId","formItem","type","pattern","title","required","onChange","button","PhoneListItem","onDeleteList","list","onClick","getVisibleContacts","getContacts","filter","getFilter","normalizedFilter","toLowerCase","contact","includes","PhonebookList","useSelector","useDispatch","map","PhonebookItem","onChangeFilter","e","filterActions","inputFilter","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactsReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.38a5bbfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__wkbGo\",\"inputFilter\":\"Filter_inputFilter__3w4ss\",\"title\":\"Filter_title__1q_Oi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"PhonebookItem_list__1fweI\",\"button\":\"PhonebookItem_button__4zCyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3MaGo\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Container.module.css\";\n\nconst Container = ({ children }) => {\n  return <div className={s.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/addContact\", (data) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name: data.name,\r\n    number: data.number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction(\"contacts/DelContact\");\r\nconst changeFilter = createAction(\"filter/change\");\r\n\r\n//export const DelContact = (id) => ({\r\n//  type: types.DELETE,\r\n//  payload: id,\r\n//});\r\n\r\n//const changeFilter = (value) => ({});\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n};\r\n","import { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport s from \"./ContactList.module.css\";\nimport { connect } from \"react-redux\";\nimport actions from \"../../redux/contacts-actions\";\n\nfunction Input({ onFormSubmit }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const contactID = useRef(uuidv4());\n\n  const inputValue = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const addContact = (event) => {\n    event.preventDefault();\n\n    onFormSubmit({ name: name, number: number, contactId: contactID });\n    formReset();\n  };\n\n  const formReset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  return (\n    <div className={s.Container}>\n      <form className={s.form} onSubmit={addContact}>\n        <label className={s.formItem}>\n          Name{\" \"}\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={inputValue}\n          />\n        </label>\n        <label className={s.formItem}>\n          Number{\" \"}\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={inputValue}\n          />\n        </label>\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nInput.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onFormSubmit: (data) => dispatch(actions.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Input);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./PhonebookItem.module.css\";\n\nconst PhoneListItem = ({ id, name, number, onDeleteList }) => {\n  return (\n    <li className={s.list} key={id}>\n      <p>{name}:</p>\n      <p>{number}</p>\n      <button className={s.button} onClick={() => onDeleteList(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nPhoneListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteList: PropTypes.func.isRequired,\n};\n\nexport default PhoneListItem;\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import React from \"react\";\nimport PhonebookItem from \"../PhonebookItem/PhonebookItem\";\n//import PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport deleteContact from \"../../redux/contacts-actions\";\nimport { getVisibleContacts } from \"../../redux/contacts-selector\";\n\nconst PhonebookList = ({ title }) => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteList = (id) => dispatch(deleteContact.deleteContact(id));\n  return (\n    <div>\n      <h2>{title}</h2>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <PhonebookItem\n            key={id}\n            name={name}\n            number={number}\n            onDeleteList={() => onDeleteList(id)}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n//PhonebookList.propTypes = {\n//  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n//  title: PropTypes.string.isRequired,\n//  onDeleteList: PropTypes.func.isRequired,\n//};\n\nexport default PhonebookList;\n\n//const getVisibleContacts = (allContacts, filter) => {\n//  const normalizedFilter = filter.toLowerCase();\n\n//  return allContacts.filter(({ contact }) =>\n//    contact.name.toLowerCase().includes(normalizedFilter)\n//  );\n//};\n\n//const mapStateToProps = (state) => {\n//  const { filter, items } = state.contacts;\n//  const visibleContacts = getVisibleContacts(items, filter);\n\n//  return {\n//    contacts: visibleContacts,\n//  };\n//};\n\n//const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//  contacts: getVisibleContacts(items, filter),\n//});\n\n//const mapDispatchToProps = (dispatch) => ({\n//  onDeleteList: (id) => dispatch(actions.DelContact(id)),\n//});\n\n//export default connect(mapStateToProps, mapDispatchToProps)(PhonebookList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\nimport filterActions from \"../../redux/contacts-actions\";\n\nconst Filter = ({ onChangeFilter }) => {\n  return (\n    <label className={s.filter}>\n      <p className={s.title}>Find contacts by name </p>\n\n      <input\n        className={s.inputFilter}\n        type=\"text\"\n        //value={value}\n        name=\"filter\"\n        onChange={onChangeFilter}\n      ></input>\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  //value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  value: state.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChangeFilter: (e) => dispatch(filterActions.changeFilter(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import Container from \"./components/Container/Container\";\nimport Input from \"./components/ContactList/ContactList\";\nimport PhonebookList from \"./components/PhonebookList/PhonebookList\";\nimport Filter from \"./components/Filter/Filter\";\n//import useLocalStorage from \"./hooks/localStorage\";\n//import { useState } from \"react\";\n//import Filter from \"./components/Filter/Filter\";\n//import { v4 as uuidv4 } from \"uuid\";\n\nexport default function App() {\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <Input />\n      <Filter />\n      <PhonebookList title=\"Contacts\" />\n    </Container>\n  );\n}\n//const deleteList = (listId) => {\n//  setContacts((state) => state.filter((contact) => contact.id !== listId));\n//};\n\n//const changeFilter = (event) => {\n//  setFilter(event.currentTarget.value);\n//};\n\n//const getVisibleContacts = () => {\n//  const normalizedFilter = filter.toLowerCase();\n\n//  return contacts.filter((contact) =>\n//    contact.name.toLowerCase().includes(normalizedFilter)\n//  );\n//};\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n//const items = (state = [], { type, payload }) => {\r\n//  switch (type) {\r\n//    case types.ADD:\r\n//      return [...state, payload];\r\n//    case types.DELETE:\r\n//      return state.filter(({ id }) => id !== payload);\r\n//    default:\r\n//      return state;\r\n//  }\r\n//};\r\n\r\n//const filter = (state = \"\", { type, payload }) => {\r\n//  switch (type) {\r\n//    case types.CHANGE_FILTER:\r\n//      return payload;\r\n//    default:\r\n//      return state;\r\n// }\r\n//};\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"./contacts-reducer\";\r\nimport {\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n//import storage from \"redux-persist/lib/storage\";\r\n\r\n//import { combineReducers } from \"redux\";\r\n//import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n//const contactsPersistConfig = {\r\n//  key: \"contacts\",\r\n//  storage,\r\n//  blacklist: [\"filter\"],\r\n//};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ContactList_Container__1te-n\",\"form\":\"ContactList_form__V9iqA\",\"formItem\":\"ContactList_formItem__1n7bS\",\"button\":\"ContactList_button__3dM_w\"};"],"sourceRoot":""}